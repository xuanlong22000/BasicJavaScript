const Graph = require("graph-js");

QUnit.module("Graph", hooks => {

  let graph;

  hooks.beforeEach(() => {
    graph = new Graph();
  });

  QUnit.module("equal", hooks => {
    QUnit.test("two strings", assert => {
      assert.true(Graph.equal("n1", "n1"));
      assert.false(Graph.equal("n1", "n2"));
    });
  });

  QUnit.module("Node", hooks => {

    hooks.beforeEach(() => {
      graph.addNode("I'm node n1", "n1");
      graph.addNode("I'm node n2", "n2");
      graph.removeNode("n2");
    });

    QUnit.test("isNode", assert => {
      assert.true(graph.isNode("n1"));
      assert.false(graph.isNode("n3"));
    });

    QUnit.test("addNode", assert => {
      assert.true(graph.isNode("n1") && graph.getNode("n1").getId() === "n1" && graph.getNode("n1").getContent() === "I'm node n1");
      assert.false(graph.isNode("n3"));
    });

    QUnit.test("getNode", assert => {
      assert.true(graph.getNode("n1").getId() === "n1" && graph.getNode("n1").getContent() === "I'm node n1");
    });

    QUnit.test("removeNode", assert => {
      assert.false(graph.isNode("n2"));
    });

  });

  QUnit.module("Edge", hooks => {

    hooks.beforeEach(() => {

      graph.addNode("I'm node n1", "n1");
      graph.addNode("I'm node n2", "n2");
      graph.addNode("I'm node n3", "n3");
      graph.addNode("I'm node n4", "n4");
      graph.addNode("I'm node n5", "n5");

      graph.addEdge("n1", "n2", "e1", 5);
      graph.addEdge("n1", "n3", "e2", 4);
      graph.addEdge("n4", "n2", "e3");
      graph.addEdge("n1", "n4", "e4");
      graph.addEdge("n1", "n5", "e5");
      graph.addEdge("n2", "n5", "e6");

      graph.removeEdge("e4");
      graph.removeNode("n5");
    });

    QUnit.test("isEdge", assert => {
      assert.true(graph.isEdge("e1"));
      assert.false(graph.isEdge("e4"));
      assert.false(graph.isEdge("e7"));
    });

    QUnit.test("addEdge", assert => {
      assert.true(graph.isEdge("e1") && graph.getEdge("e1").getId() === "e1" &&
                  graph.getEdge("e1").getNodeStart().getId() === "n1" &&
                  graph.getEdge("e1").getNodeEnd().getId() === "n2" &&
                  graph.getEdge("e1").getWeight() === 5
      );
    });

    QUnit.test("getEdge", assert => {
      assert.true(graph.getEdge("e2").getId() === "e2" &&
                  graph.getEdge("e2").getNodeStart().getId() === "n1" &&
                  graph.getEdge("e2").getNodeEnd().getId() === "n3" &&
                  graph.getEdge("e2").getWeight() === 4
      );
    });

    QUnit.test("getWeight", assert => {
      assert.equal(graph.getEdge("e2").getWeight(), 4);
      assert.equal(graph.getEdge("e3").getWeight(), 1);
    });

    QUnit.test("removeEdge", assert => {
      assert.false(graph.isEdge("e4"));
      assert.false(graph.isEdge("e5"));
    });

    QUnit.test("getPredecessors", assert => {

      let predecessorsID = new Array();

      graph.getPredecessors("n2").forEach((node) => {
        predecessorsID.push(node.getId());
      });

      assert.deepEqual(predecessorsID, ["n1", "n4"]);
    });

    QUnit.test("getSuccessors", assert => {

      let successorsID = new Array();

      graph.getSuccessors("n1").forEach((node) => {
        successorsID.push(node.getId());
      });

      assert.deepEqual(successorsID, ["n2", "n3"]);
    });

  });
});
