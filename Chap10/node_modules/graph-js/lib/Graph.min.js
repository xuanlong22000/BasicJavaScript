class Node{#id;#content;constructor(object,id){this.#content=object;this.#id=id}
getId(){return this.#id}
getContent(){return this.#content}}
class Edge{#id;#nodeStart;#nodeEnd;#weight;constructor(nodeStart,nodeEnd,id,weight=1){this.#id=id;this.#nodeStart=nodeStart;this.#nodeEnd=nodeEnd;this.#weight=weight}
getId(){return this.#id}
getNodeStart(){return this.#nodeStart}
getNodeEnd(){return this.#nodeEnd}
getWeight(){return this.#weight}
setWeight(weight){this.#weight=weight}}
class Graph{#edges;#nodes;constructor(){this.#nodes=new Array();this.#edges=new Array()}
static equal(str1,str2){str1=str1.toString();str2=str2.toString();return str1.localeCompare(str2)==0}
isNode(id){let result=!1;this.#nodes.forEach((node)=>{if(Graph.equal(node.getId(),id)){result=!0}});return result}
isEdge(id){let result=!1;this.#edges.forEach((item)=>{if(Graph.equal(item.getId(),id)){result=!0}});return result}
addNode(object,id){if(object!=null&&id!=null){if(!this.isNode(id)){this.#nodes.push(new Node(object,id))}else{console.error(`Error : The node's id (id=${id}) is already exists`)}}else{console.error("Error : The node is not correctly defined")}}
addEdge(idNodeStart,idNodeEnd,id,weight=1){if(idNodeStart!=null&&idNodeEnd!=null&&id!=null){if(this.isNode(idNodeStart)&&this.isNode(idNodeEnd)){if(!this.isEdge(id)){this.#edges.push(new Edge(this.getNode(idNodeStart),this.getNode(idNodeEnd),id,weight))}else{console.error(`Error : The edge's id (id=${id}) is already exists`)}}else{console.error("Error : The edge is not create because one of nodes doesn't exist.")}}else{console.error("Error : The edge is not correctly defined.")}}
removeNode(id){let arrayIndex=new Array();this.#nodes.forEach((node,index)=>{if(Graph.equal(node.getId(),id)){this.#nodes.splice(index,1)}});this.#edges.forEach((edge,index)=>{if(Graph.equal(edge.getNodeStart().getId(),id)||Graph.equal(edge.getNodeEnd().getId(),id)){arrayIndex.push(index)}});arrayIndex.forEach((item,index)=>{this.#edges.splice(item-index,1)})}
removeEdge(id){this.#edges.forEach((edge,index)=>{if(Graph.equal(edge.getId(),id)){this.#edges.splice(index,1)}})}
getPredecessors(id){let predecessors=new Array();this.#edges.forEach((edge)=>{if(Graph.equal(edge.getNodeEnd().getId(),id)){predecessors.push(edge.getNodeStart())}});return predecessors}
getSuccessors(id){let successors=new Array();this.#edges.forEach((edge)=>{if(Graph.equal(edge.getNodeStart().getId(),id)){successors.push(edge.getNodeEnd())}});return successors}
getNode(id){let result=new Node();this.#nodes.forEach((node)=>{if(Graph.equal(node.getId(),id)){result=node}});return result}
getNodes(){return this.#nodes}
getEdge(id){let result=new Edge();this.#edges.forEach((edge)=>{if(Graph.equal(edge.getId(),id)){result=edge}});return result}
getEdges(){return this.#edges}}
module.exports=Graph
